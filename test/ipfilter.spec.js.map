{"version":3,"sources":["../src/test/ipfilter.spec.js"],"names":[],"mappings":"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","file":"ipfilter.spec.js","sourcesContent":["/* global describe, it, beforeEach */\n\n'use strict';\n\nvar ipfilter = require('../index'),\n    assert = require('assert');\n\ndescribe('enforcing IP address blacklist restrictions', function(){\n\n    beforeEach(function(){\n        this.ipfilter = ipfilter([ '127.0.0.1' ], { log: false });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n    });\n\n    it('should allow all non-blacklisted ips', function( done ){\n        this.req.connection.remoteAddress = '127.0.0.2';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should allow all non-blacklisted IPv6 ips', function(done){\n      this.req.connection.remoteAddress = '::1';\n      this.ipfilter( this.req, {}, () => {\n        done();\n      });\n    });\n\n    it('should allow all non-blacklisted forwarded ips', function( done ){\n        this.req.headers['x-forwarded-for'] = '127.0.0.2';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should deny all blacklisted ips', function( done ){\n        this.req.connection.remoteAddress = '127.0.0.1';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n\n    it('should deny all blacklisted forwarded ips', function( done ){\n        this.req.headers['x-forwarded-for'] = '127.0.0.1';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n});\n\ndescribe('enforcing IP address whitelist restrictions', function(){\n\n    beforeEach(function(){\n        this.ipfilter = ipfilter([ '127.0.0.1' ], { log: false, mode: 'allow' });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n    });\n\n    it('should allow whitelisted ips', function( done ){\n        this.req.connection.remoteAddress = '127.0.0.1';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should allow whitelisted forwarded ips', function( done ){\n        this.req.headers['x-forwarded-for'] = '127.0.0.1';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should allow whitelisted port ips',function(done){\n        this.req.connection.remoteAddress = '127.0.0.1:84849';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should deny all non-whitelisted ips', function( done ){\n        this.req.connection.remoteAddress = '127.0.0.2';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n\n    it('should deny all non-whitelisted forwarded ips', function( done ){\n        this.req.headers['x-forwarded-for'] = '127.0.0.2';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n});\n\ndescribe('using cidr block',function(){\n    describe('enforcing whitelist restrictions',function(){\n        beforeEach(function(){\n            // Ip range: 127.0.0.1 - 127.0.0.14\n            this.ipfilter = ipfilter([ '127.0.0.1/28' ], { log: false, mode: 'allow' });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow whitelisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should deny all non-whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.17';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny all non-whitelisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.17';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('enforcing IP address blacklist restrictions', function(){\n\n        beforeEach(function(){\n            this.ipfilter = ipfilter([ '127.0.0.1/28' ], { log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow all non-blacklisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.17';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow all non-blacklisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.17';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should deny all blacklisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny all blacklisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('enforcing private ip restrictions',function(){\n        beforeEach(function(){\n            this.ipfilter = ipfilter([ '127.0.0.1/28' ], { log: false, allowPrivateIPs: true });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow all private ips', function( done ){\n            this.req.connection.remoteAddress = '10.0.0.0';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n    });\n});\n\ndescribe('using ranges',function(){\n    describe('enforcing whitelist restrictions',function(){\n        beforeEach(function(){\n            // Ip range: 127.0.0.1 - 127.0.0.14\n            this.ipfilter = ipfilter([ ['127.0.0.1','127.0.0.3'] ], { log: false, mode: 'allow' });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow whitelisted ips with port numbers', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1:93923';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow whitelisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should deny all non-whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.17';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny all non-whitelisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.17';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('enforcing ip restrictions with only one ip in the range',function(){\n        beforeEach(function(){\n            // Ip range: 127.0.0.1 - 127.0.0.14\n            this.ipfilter = ipfilter([ ['127.0.0.1'] ], { log: false, mode: 'allow' });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should deny all non-whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.17';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('enforcing IP address blacklist restrictions', function(){\n\n        beforeEach(function(){\n            this.ipfilter = ipfilter([ ['127.0.0.1','127.0.0.3'] ], { log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow all non-blacklisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.17';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow all non-blacklisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.17';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should deny all blacklisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny all blacklisted forwarded ips', function( done ){\n            this.req.headers['x-forwarded-for'] = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('enforcing private ip restrictions',function(){\n        beforeEach(function(){\n            this.ipfilter = ipfilter([ ['127.0.0.1','127.0.0.3'] ], { log: false, allowPrivateIPs: true });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow all private ips', function( done ){\n            this.req.connection.remoteAddress = '10.0.0.0';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n    });\n});\n\ndescribe('excluding certain routes from filtering',function(){\n    beforeEach(function(){\n        this.ipfilter = ipfilter(['127.0.0.1'], { log: false, mode: 'allow', excluding: ['/foo.*'] });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            },\n            url: '/foo?bar=123'\n        };\n    });\n\n    it('should allow requests to excluded paths', function( done ){\n        this.req.connection.remoteAddress = '190.0.0.0';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should deny requests to other paths', function(done){\n        this.req.url = '/bar';\n        this.req.connection.remoteAddress = '190.0.0.0';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n});\n\ndescribe('no ip address can be found',function(){\n    beforeEach(function(){\n        this.ipfilter = ipfilter(['127.0.0.1'], { log: false, mode: 'allow', excluding: ['/foo.*'] });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n    });\n\n    it('should deny requests', function(done){\n        this.req.url = '/bar';\n        this.req.connection.remoteAddress = '';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n});\n\ndescribe('external logger function', function () {\n\n    it('should log to a passed logger exactly one message', function (done) {\n        var messages = [];\n        var logF = function logFF(message) {\n            messages.push(message);\n        };\n        this.ipfilter = ipfilter(['127.0.0.1'], {log: true, logF: logF});\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n\n        this.req.connection.remoteAddress = '127.0.0.1';\n        var res = {\n            end: function () {\n                assert.equal(1, messages.length);\n                done();\n            }\n        };\n\n        this.ipfilter(this.req, res, function () {\n        });\n    });\n\n    it('should log to a passed logger the correct message', function (done) {\n        var messages = [];\n        var logF = function logFF(message) {\n            messages.push(message);\n        };\n        this.ipfilter = ipfilter(['127.0.0.1'], {log: true, logF: logF});\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n\n\n        this.req.connection.remoteAddress = '127.0.0.1';\n        var res = {\n            end: function () {\n                assert.equal('Access denied to IP address: 127.0.0.1', messages[0]);\n                done();\n            }\n        };\n\n        this.ipfilter(this.req, res, function () {\n        });\n    });\n\n});\n\ndescribe('an array of cidr blocks',function(){\n    describe('blacklist',function(){\n        beforeEach(function(){\n            this.ipfilter = ipfilter(['72.30.0.0/26', '127.0.0.1/24'], { mode: 'deny', log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should deny all blacklisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n\n    describe('whitelist',function(){\n        beforeEach(function(){\n            this.ipfilter = ipfilter(['72.30.0.0/26', '127.0.0.1/24'], { mode: 'allow', log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow all whitelisted ips', function( done ){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n    });\n});\n\ndescribe('mixing different types of filters',function(){\n    describe('with a whitelist', function () {\n        beforeEach(function(){\n            this.ipfilter = ipfilter(['127.0.0.1', '192.168.1.3/28', ['127.0.0.3', '127.0.0.35']], { cidr: true, mode: 'allow', log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should allow explicit ips',function(done){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow ips in a cidr block',function(done){\n            this.req.connection.remoteAddress = '192.168.1.1';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n\n        it('should allow ips in a range',function(done){\n            this.req.connection.remoteAddress = '127.0.0.20';\n            this.ipfilter( this.req, {}, function(){\n                done();\n            });\n        });\n    });\n\n    describe('with a blacklist', function(){\n        beforeEach(function(){\n            this.ipfilter = ipfilter(['127.0.0.1', '192.168.1.3/28', ['127.0.0.3', '127.0.0.35']], { mode: 'deny', log: false });\n            this.req = {\n                session: {},\n                headers: [],\n                connection: {\n                    remoteAddress: ''\n                }\n            };\n        });\n\n        it('should deny explicit ips',function(done){\n            this.req.connection.remoteAddress = '127.0.0.1';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny ips in a cidr block',function(done){\n            this.req.connection.remoteAddress = '192.168.1.15';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n\n        it('should deny ips in a range',function(done){\n            this.req.connection.remoteAddress = '127.0.0.15';\n            var res = {\n                end: function(){\n                    assert.equal( 401, res.statusCode );\n                    done();\n                }\n            };\n\n            this.ipfilter( this.req, res, function(){});\n        });\n    });\n});\n\n//CloudFlare Tests\ndescribe('enforcing cloudflare based client IP address blacklist restrictions', function(){\n\n    beforeEach(function(){\n        this.ipfilter = ipfilter([ '127.0.0.1' ], { log: false });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n    });\n\n    it('should allow all non-blacklisted forwarded ips', function( done ){\n        this.req.headers['cf-connecting-ip'] = '127.0.0.2';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n\n    it('should deny all blacklisted forwarded ips', function( done ){\n        this.req.headers['cf-connecting-ip'] = '127.0.0.1';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n\n});\ndescribe('enforcing cloudflare based client IP address whitelist restrictions', function(){\n    beforeEach(function(){\n        this.ipfilter = ipfilter([ '127.0.0.1' ], { log: false, mode: 'allow' });\n        this.req = {\n            session: {},\n            headers: [],\n            connection: {\n                remoteAddress: ''\n            }\n        };\n    });\n\n    it('should allow whitelisted forwarded ips', function( done ){\n        this.req.headers['cf-connecting-ip'] = '127.0.0.1';\n        this.ipfilter( this.req, {}, function(){\n            done();\n        });\n    });\n    it('should deny all non-whitelisted forwarded ips', function( done ){\n        this.req.headers['cf-connecting-ip'] = '127.0.0.2';\n        var res = {\n            end: function(){\n                assert.equal( 401, res.statusCode );\n                done();\n            }\n        };\n\n        this.ipfilter( this.req, res, function(){});\n    });\n\n});\n"]}